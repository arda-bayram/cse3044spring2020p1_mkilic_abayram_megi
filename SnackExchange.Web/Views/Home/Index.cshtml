@model IEnumerable<SnackExchange.Web.Models.Exchange>
@inject Microsoft.AspNetCore.Identity.UserManager<SnackExchange.Web.Models.Auth.AppUser> userManager;

@{
    ViewData["Title"] = "Home Page";

    SnackExchange.Web.Models.Auth.AppUser user = null;
    if (User.Identity.IsAuthenticated)
    {
        user = userManager.FindByNameAsync(User.Identity.Name).Result;
    }
}



@if (Model != null && Model.Count() > 0)
{
    <h1>Exchange TimeLine</h1>

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ExchangeNotes)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PhotoUrl)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TrackingNumber)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sender)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Receiver)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Status)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedAt)
                </th>
                <th class="col-sm-2"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ExchangeNotes)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PhotoUrl)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TrackingNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Sender.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Receiver.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Status)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CreatedAt)
                    </td>
                    <td class="col-sm-2">
                        <button type="button" class="btn btn-info btn-sm" onclick="location.href='@Url.Action("Details", "Exchanges", item)'">Details</button>
                        <button type="button" class="btn btn-warning btn-sm" onclick="location.href='@Url.Action("Edit", "Exchanges", item)'">Edit</button>
                        <button type="button" class="btn btn-danger btn-sm" onclick="location.href='@Url.Action("Delete", "Exchanges", item)'">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-lg-4 mb-4">
                <div class="card h-100">
                    <a href="#"><img class="card-img-top" src="http://placehold.it/700x400" alt=""></a>
                    <h4 class="card-header">
                        @Html.Raw(item.Sender.Email)
                    </h4>
                    <div class="card-body">
                        <p class="card-text">@Html.Raw(item.ExchangeNotes)</p>
                    </div>
                    <div class="card-footer">
                        <button type="button" class="btn btn-info btn-md" onclick="location.href='@Url.Action("Details", "Exchanges")'">Details</button>
                        <button type="button" class="btn btn-warning btn-md" onclick="location.href='@Url.Action("Edit", "Exchanges")'">Edit</button>
                        <button type="button" class="btn btn-danger btn-md" onclick="location.href='@Url.Action("Delete", "Exchanges")'">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}


else
{
    @if (User.Identity.IsAuthenticated)
    {
        @Html.Raw("<h1>There are no exchanges!</h1>")
    }
    else
    {
        @Html.Raw("<h1>Register or Login</h1>")
    }
}


