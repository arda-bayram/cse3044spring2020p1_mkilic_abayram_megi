@model SnackExchange.Web.Models.Exchange
@inject Microsoft.AspNetCore.Identity.UserManager<SnackExchange.Web.Models.Auth.AppUser> userManager;
@using System.Text.RegularExpressions;

@{
    ViewData["Title"] = "Details";
    var user = userManager.FindByNameAsync(User.Identity.Name).Result;
}

<h1>Details</h1>

<div>
    <h4>Exchange</h4>
    <hr />
    <dl class="row">

        @if (user.IsModerator)
        {
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.ModeratorNotes)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.ModeratorNotes)
            </dd>
        }

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ExchangeNotes)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ExchangeNotes)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.PhotoUrl)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.PhotoUrl)
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.TrackingNumber)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.TrackingNumber)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Sender)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Sender.Email)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Receiver)
        </dt>
        @if (Model.Receiver != null)
        {
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Receiver.Email)
            </dd>
        }
        else
        {
            <dd class="col-sm-10">
                @Html.Raw("<p> - </p>")
            </dd>
        }

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Moderator)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Moderator.Id)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Status)
        </dd>
    </dl>

    @if ((Model.Status != ExchangeStatus.Completed && Model.Status != ExchangeStatus.Accepted && Model.Status != ExchangeStatus.OnAir) && (user.Email == Model.Sender.Email || user.IsModerator))
    {
        <input type="button" value="Edit" class="btn btn-warning" id="btnEdit"
               onclick="location.href='@Url.Action("Edit", "Exchanges", Model)'" />
    }

    @if ((Model.Status == ExchangeStatus.Accepted || Model.Status == ExchangeStatus.OnAir) && user.Email == Model.Sender.Email)
    {
        <input type="button" value="Completed" class="btn btn-success" id="btnCompleted"
               onclick="location.href='@Url.Action("Edit", "Exchanges", Model)'" />
    }

    <br />
    <h class="col-sm-2">
        @Html.Raw("<h1><b>Products</b></h1>")
    </h>
    @if (Model.Products.Count < 0)
    {
        @Html.Raw("<h4>No products found!<h4>")
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Name)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Description)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Price)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Products.Count > 0)
                {
                    double totalPrice = 0;
                    @for (var i = 0; i < Model.Products.Count; i++)
                    {
                        <tr>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Name)
                            </td>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Description)
                            </td>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Price) $
                            </td>
                        </tr>
                        var priceUnformatted = Model.Products[i].Price;
                        double price;
                        if (priceUnformatted.All(char.IsDigit))
                        {
                            price = Double.Parse(Model.Products[i].Price);
                        }
                        else
                        {
                            var dotIndex = -1;
                            dotIndex = priceUnformatted.IndexOf(".");
                            var p = Regex.Replace(priceUnformatted, "[^.0-9]", "");
                            if (dotIndex != -1)
                            {
                                p.Insert(dotIndex, ".");
                            }
                            price = Double.Parse(p);
                        }
                        totalPrice += price;
                    }

                    <tr>
                        @Html.Raw("<b>Total Price = </b>" + totalPrice + " $")
                    </tr>

                }

            </tbody>
        </table>
    }

    <h class="col-sm-2">
        @Html.Raw("<h1><b>Offers</b></h1>")
    </h>
    @if (Model.Offers.Count <= 0)
    {
        @Html.Raw("<h4>No offers proposed yet!<h4>")
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Offers.First().Offerer.Email)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Offers.First().OfferNotes)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Offers.First().Status)
                    </th>
                    <th class="col-sm-2">
                        @Html.Raw("Total Price")
                    </th>
                    <th class="col-sm-2">
                        @Html.Raw("Show")
                    </th>

                    @if (Model.Status != ExchangeStatus.Accepted && Model.Sender.Email == user.Email)
                    {
                        <th class="col-sm-2">
                            @Html.Raw("Accept")
                        </th>
                        <th class="col-sm-2">
                            @Html.Raw("Reject")
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.Offers.Count; i++)
                {
                    double totalPrice = 0;
                    @foreach (var product in Model.Offers[i].Products)
                    {
                        var priceUnformatted = product.Price;
                        double price;
                        if (priceUnformatted.All(char.IsDigit))
                        {
                            price = Double.Parse(product.Price);
                        }
                        else
                        {
                            var dotIndex = -1;
                            dotIndex = priceUnformatted.IndexOf(".");
                            var p = Regex.Replace(priceUnformatted, "[^.0-9]", "");
                            if (dotIndex != -1)
                            {
                                p.Insert(dotIndex, ".");
                            }
                            price = Double.Parse(p);
                        }
                        totalPrice += price;
                    }

                    @if (Model.Status == ExchangeStatus.Accepted)
                    {
                        @if (Model.Offers[i].Status == OfferStatus.Accepted)
                        {
                            <tr>
                                <td class="col-sm-2" style="color:green">
                                    @Html.DisplayFor(model => model.Offers[i].Offerer.Email)
                                </td>
                                <td class="col-sm-2" style="color:green">
                                    @Html.DisplayFor(model => model.Offers[i].OfferNotes)
                                </td>
                                <td class="col-sm-2" style="color:green">
                                    @Html.DisplayFor(model => model.Offers[i].Status)
                                </td>
                                <td class="col-sm-2" style="color:green">
                                    @Html.Raw(totalPrice) $
                                </td>
                                <td class="col-sm-2">
                                    <input type="button" value="Show" class="btn btn-info" id="btnShow"
                                           onclick="location.href='@Url.Action("Details", "Offers", new { id = Model.Offers[i].Id })'" />
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].Offerer.Email)
                                </td>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].OfferNotes)
                                </td>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].Status)
                                </td>
                                <td>
                                    @Html.Raw(totalPrice) $
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        @if (Model.Offers[i].Status == OfferStatus.Rejected)
                        {
                            <tr>
                                <td class="col-sm-2" style="color:red">
                                    @Html.DisplayFor(model => model.Offers[i].Offerer.Email)
                                </td>
                                <td class="col-sm-2" style="color:red">
                                    @Html.DisplayFor(model => model.Offers[i].OfferNotes)
                                </td>
                                <td class="col-sm-2" style="color:red">
                                    @Html.DisplayFor(model => model.Offers[i].Status)
                                </td>
                                <td class="col-sm-2" style="color:red">
                                    @Html.Raw(totalPrice) $
                                </td>
                                <td class="col-sm-2">
                                    <input type="button" value="Show" class="btn btn-info" id="btnShow"
                                           onclick="location.href='@Url.Action("Details", "Offers", new { id = Model.Offers[i].Id })'" />
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].Offerer.Email)
                                </td>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].OfferNotes)
                                </td>
                                <td class="col-sm-2">
                                    @Html.DisplayFor(model => model.Offers[i].Status)
                                </td>
                                <td class="col-sm-2">
                                    @Html.Raw(totalPrice) $
                                </td>
                                <td class="col-sm-2">
                                    <input type="button" value="Show" class="btn btn-info" id="btnShow"
                                           onclick="location.href='@Url.Action("Details", "Offers", new { id = Model.Offers[i].Id })'" />
                                </td>
                                @if (user.IsModerator == false && Model.Offers[i].Offerer.Email != user.Email && (Model.Offers[i].Status == OfferStatus.Waiting))
                                {
                                    <td class="col-sm-2">
                                        <input type="button" value="Accept" class="btn btn-success" id="btnAccept"
                                               onclick="location.href='@Url.Action("Accept", "Offers", new { id = Model.Offers[i].Id })'" />
                                    </td>
                                    <td class="col-sm-2">
                                        <input type="button" value="Reject" class="btn btn-danger" id="btnReject"
                                               onclick="location.href='@Url.Action("Reject", "Offers", new { id = Model.Offers[i].Id })'" />
                                    </td>
                                }

                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    }
</div>

<div>
    @if (user.Email != Model.Sender.Email && !user.IsModerator)
    {
        <div>
            @if ((Model.Status == ExchangeStatus.Created || Model.Status == ExchangeStatus.None))
            {
                <input type="button" value="Offer" class="btn btn-info" id="btnOffer"
                       onclick="location.href='@Url.Action("Create", "Offers", Model)'" />
            }
                <input type="button" value="Back to List" class="btn btn-info" id="btnBack"
                       onclick="location.href='@Url.Action("Index", "Home", Model)'" />
        </div>

    }
    else
    {
        @*<hr />*@
        @*@if ((Model.Status != ExchangeStatus.Completed || Model.Status != ExchangeStatus.Accepted || Model.Status != ExchangeStatus.OnAir))
            {
                <a asp-action="Edit" asp-route-id="@Model.Id">Edit |</a>
            }*@
        <div class="col-md-4">
            <input type="button" value="Back to List" class="btn btn-info" id="btnBack"
                   onclick="location.href='@Url.Action("Index", "Home", Model)'" />
        </div>
        @*<a asp-controller="Home" asp-action="Index"> Back to List</a>*@
    }


</div>
