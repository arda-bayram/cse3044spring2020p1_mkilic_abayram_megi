@model SnackExchange.Web.Models.Offer
@using System.Text.RegularExpressions;
@inject Microsoft.AspNetCore.Identity.UserManager<SnackExchange.Web.Models.Auth.AppUser> userManager;

@{
    ViewData["Title"] = "Details";
    var user = userManager.FindByNameAsync(User.Identity.Name).Result;
}

<h1>Details</h1>

<div class="container-fluid">
    <h4>Offer</h4>
    <hr />
    <div class="container">
        <div class="row">
            <div class="col-8">
                <dl class="row">
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.Offerer)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.Offerer.Email)
                    </dd>
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.OfferNotes)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.OfferNotes)
                    </dd>
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.PhotoUrl)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.PhotoUrl)
                    </dd>
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.Status)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.Status)
                    </dd>
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.CreatedAt)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.CreatedAt)
                    </dd>
                    <dt class="col-sm-3">
                        @Html.DisplayNameFor(model => model.UpdatedAt)
                    </dt>
                    <dd class="col-sm-7">
                        @Html.DisplayFor(model => model.UpdatedAt)
                    </dd>
                </dl>
            </div>
            <div class="col-4">
                <dl class="col">
                    <dt class="col-sm-3">
                    </dt>
                    <dd class="col-sm-7">

                        @if (!string.IsNullOrEmpty(Model.PhotoUrl))
                        {
                            <a href="#">
                                <img src="@Url.Content(Model.PhotoUrl)" alt="" class="card-img-top" />
                            </a>
                        }
                        else
                        {
                            <a href="#">
                                <img class="card-img-top" src="http://placehold.it/700x400" alt="">
                            </a>
                        }
                    </dd>
                </dl>
            </div>
        </div>
    </div>
    @if (Model.Status != OfferStatus.Accepted && Model.Status != OfferStatus.Rejected && (Model.Offerer.Email == user.Email || user.IsModerator))
    {
        @if (Model.Offerer.Email == user.Email)
        {
            <input type="button" value="Edit" class="btn btn-warning" id="btnShow"
                   onclick="location.href='@Url.Action("Edit", "Offers", new { id = Model.Id })'" />
        }
        <input type="button" value="Delete" class="btn btn-danger" id="btnDelete"
               onclick="location.href='@Url.Action("Delete", "Offers", new { id = Model.Id })'" />
    }
    <br />
    <h class="col-sm-2">
        @Html.Raw("<h1><b>Products</b></h1>")
    </h>
    @if (Model.Products.Count < 0)
    {
        @Html.Raw("<h4>No products found!<h4>")
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Name)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Description)
                    </th>
                    <th class="col-sm-2">
                        @Html.DisplayNameFor(model => model.Products.First().Price)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Products.Count > 0)
                {
                    double totalPrice = 0;
                    @for (var i = 0; i < Model.Products.Count; i++)
                    {
                        <tr>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Name)
                            </td>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Description)
                            </td>
                            <td class="col-sm-2">
                                @Html.DisplayFor(model => model.Products[i].Price) $
                            </td>
                        </tr>
                        var priceUnformatted = Model.Products[i].Price;
                        double price;
                        if (priceUnformatted.All(char.IsDigit))
                        {
                            price = Double.Parse(Model.Products[i].Price);
                        }
                        else
                        {
                            var dotIndex = -1;
                            dotIndex = priceUnformatted.IndexOf(".");
                            var p = Regex.Replace(priceUnformatted, "[^.0-9]", "");
                            if (dotIndex != -1)
                            {
                                p.Insert(dotIndex, ".");
                            }
                            price = Double.Parse(p);
                        }
                        totalPrice += price;
                    }

                    <tr>
                        @Html.Raw("<b>Total Price = </b>" + totalPrice + " $")
                    </tr>

                }

            </tbody>
        </table>
    }
</div>
<div>
    <input type="button" value="Back To Exchange" class="btn btn-info" id="btnShow"
           onclick="location.href='@Url.Action("Details", "Exchanges", new { id = Model.Exchange.Id })'" />
</div>
